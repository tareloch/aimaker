"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞
"""

import logging
from typing import List, Dict, Any
from abc import ABC, abstractmethod

from agent.core.config import Config


class EarningStrategy(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    
    def __init__(self, name: str, config: Config):
        self.name = name
        self.config = config
        self.logger = logging.getLogger(f"strategy.{name}")
        self.is_active = False
        self.daily_earnings = 0.0
        self.success_rate = 0.0
        
    @abstractmethod
    async def can_execute(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        pass
    
    @abstractmethod
    async def execute(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        pass
    
    @abstractmethod
    async def estimate_potential(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
        pass


class FreelanceStrategy(EarningStrategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ"""
    
    def __init__(self, config: Config):
        super().__init__("freelance", config)
        
    async def can_execute(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        return (self.config.api.upwork_client_id is not None or 
                self.config.api.fiverr_api_key is not None)
    
    async def execute(self) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—Ä–∏–ª–∞–Ω—Å –∑–∞–¥–∞—á"""
        try:
            self.logger.info("üîç –ü–æ–∏—Å–∫ —Ñ—Ä–∏–ª–∞–Ω—Å –∑–∞–¥–∞–Ω–∏–π...")
            
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API
            earnings = 0.0
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á
            potential_tasks = [
                {"title": "Data entry", "budget": 0.5, "difficulty": "easy"},
                {"title": "Text translation", "budget": 1.2, "difficulty": "medium"},
                {"title": "Content writing", "budget": 2.0, "difficulty": "medium"},
            ]
            
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API —Ñ—Ä–∏–ª–∞–Ω—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(potential_tasks)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á")
            
            return {
                "success": True,
                "earnings": earnings,
                "tasks_found": len(potential_tasks),
                "strategy": self.name
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—Ä–∏–ª–∞–Ω—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return {
                "success": False,
                "earnings": 0.0,
                "error": str(e),
                "strategy": self.name
            }
    
    async def estimate_potential(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–∞"""
        if not await self.can_execute():
            return 0.0
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: $0.5-2.0 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–∞–≤—ã–∫–æ–≤
        return 1.5


class CryptoTradingStrategy(EarningStrategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ"""
    
    def __init__(self, config: Config):
        super().__init__("crypto_trading", config)
        
    async def can_execute(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –¥–ª—è –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂"""
        return self.config.api.binance_api_key is not None
    
    async def execute(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            self.logger.info("üìà –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞...")
            
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥
            earnings = 0.0
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
            market_condition = "stable"  # bullish, bearish, stable
            
            self.logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞: {market_condition}")
            
            return {
                "success": True,
                "earnings": earnings,
                "market_condition": market_condition,
                "strategy": self.name
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return {
                "success": False,
                "earnings": 0.0,
                "error": str(e),
                "strategy": self.name
            }
    
    async def estimate_potential(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç —Ç—Ä–µ–π–¥–∏–Ω–≥–∞"""
        if not await self.can_execute():
            return 0.0
        
        # –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        risk_factor = self.config.agent.risk_tolerance
        return 3.0 * risk_factor


class ContentCreationStrategy(EarningStrategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self, config: Config):
        super().__init__("content_creation", config)
        
    async def can_execute(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        return self.config.api.openai_api_key is not None
    
    async def execute(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            self.logger.info("‚úçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            
            earnings = 0.0
            
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º —Ä–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_types = ["blog_posts", "social_media", "product_descriptions"]
            
            self.logger.info(f"–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_types}")
            
            return {
                "success": True,
                "earnings": earnings,
                "content_created": len(content_types),
                "strategy": self.name
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return {
                "success": False,
                "earnings": 0.0,
                "error": str(e),
                "strategy": self.name
            }
    
    async def estimate_potential(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        if not await self.can_execute():
            return 0.0
        
        return 1.0


class SurveyStrategy(EarningStrategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –æ–ø—Ä–æ—Å–∞—Ö –∏ –º–∏–∫—Ä–æ–∑–∞–¥–∞–Ω–∏—è—Ö"""
    
    def __init__(self, config: Config):
        super().__init__("surveys", config)
        
    async def can_execute(self) -> bool:
        """–û–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–¥–∞"""
        return True
    
    async def execute(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤"""
        try:
            self.logger.info("üìù –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤...")
            
            earnings = 0.0
            
            # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ä–æ—Å–æ–≤
            available_surveys = 3
            
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {available_surveys} –æ–ø—Ä–æ—Å–æ–≤")
            
            return {
                "success": True,
                "earnings": earnings,
                "surveys_completed": available_surveys,
                "strategy": self.name
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ä–æ—Å–æ–≤: {e}")
            return {
                "success": False,
                "earnings": 0.0,
                "error": str(e),
                "strategy": self.name
            }
    
    async def estimate_potential(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç –æ–ø—Ä–æ—Å–æ–≤"""
        return 0.3  # –ù–∏–∑–∫–∏–π, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥


class StrategyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    
    def __init__(self, config: Config):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategies = {
            "freelance": FreelanceStrategy(config),
            "crypto_trading": CryptoTradingStrategy(config),
            "content_creation": ContentCreationStrategy(config),
            "surveys": SurveyStrategy(config),
        }
        
        self.logger.info(f"üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.strategies)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    
    async def get_available_strategies(self) -> List[EarningStrategy]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        available = []
        
        for strategy in self.strategies.values():
            if await strategy.can_execute():
                available.append(strategy)
        
        self.logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(available)}")
        return available
    
    async def select_best_strategies(self, target_amount: float) -> List[EarningStrategy]:
        """–í—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º—ã"""
        available = await self.get_available_strategies()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º—É –¥–æ—Ö–æ–¥—É
        strategy_potentials = []
        for strategy in available:
            potential = await strategy.estimate_potential()
            strategy_potentials.append((strategy, potential))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
        strategy_potentials.sort(key=lambda x: x[1], reverse=True)
        
        selected = []
        total_potential = 0.0
        
        for strategy, potential in strategy_potentials:
            if total_potential < target_amount:
                selected.append(strategy)
                total_potential += potential
        
        self.logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(selected)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ${target_amount}")
        return selected
    
    async def execute_strategy(self, strategy_name: str) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""
        if strategy_name not in self.strategies:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_name}")
        
        strategy = self.strategies[strategy_name]
        
        if not await strategy.can_execute():
            return {
                "success": False,
                "error": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                "strategy": strategy_name
            }
        
        return await strategy.execute()
    
    def get_strategy_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
        stats = {}
        
        for name, strategy in self.strategies.items():
            stats[name] = {
                "is_active": strategy.is_active,
                "daily_earnings": strategy.daily_earnings,
                "success_rate": strategy.success_rate
            }
        
        return stats