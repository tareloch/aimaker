"""
–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Gemini API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π –∏ —ç–∫–æ–Ω–æ–º–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import asyncio
import logging
import random
import time
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime, timedelta
import json

import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold


@dataclass
class APIKeyStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞"""
    key: str
    requests_today: int = 0
    last_used: datetime = None
    errors_count: int = 0
    is_active: bool = True
    daily_limit: int = 1500  # –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è Gemini free tier
    
    def __post_init__(self):
        if self.last_used is None:
            self.last_used = datetime.now()


class SmartContextAccumulator:
    """–£–º–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self):
        self.context_buffer = []
        self.current_session = None
        self.last_request_time = None
        self.session_timeout = 300  # 5 –º–∏–Ω—É—Ç
        
    def add_context(self, context_type: str, data: Any):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä"""
        self.context_buffer.append({
            "type": context_type,
            "data": data,
            "timestamp": datetime.now()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
        if len(self.context_buffer) > 50:
            self.context_buffer = self.context_buffer[-30:]
    
    def should_make_request(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–µ–π—á–∞—Å"""
        if not self.last_request_time:
            return True
            
        # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        time_since_last = (datetime.now() - self.last_request_time).seconds
        
        return (len(self.context_buffer) >= 10 or 
                time_since_last > self.session_timeout or
                any(ctx["type"] == "critical" for ctx in self.context_buffer))
    
    def build_accumulated_prompt(self, new_query: str) -> str:
        """–°–æ–±—Ä–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –æ–¥–∏–Ω –ø—Ä–æ–º–ø—Ç"""
        if not self.context_buffer:
            return new_query
            
        context_summary = []
        for ctx in self.context_buffer[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            if ctx["type"] == "strategy_result":
                context_summary.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {ctx['data']}")
            elif ctx["type"] == "market_data":
                context_summary.append(f"–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {ctx['data']}")
            elif ctx["type"] == "earnings":
                context_summary.append(f"–ó–∞—Ä–∞–±–æ—Ç–æ–∫: {ctx['data']}")
            elif ctx["type"] == "error":
                context_summary.append(f"–û—à–∏–±–∫–∞: {ctx['data']}")
        
        accumulated_context = "\n".join(context_summary)
        
        full_prompt = f"""
–ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–°–ò–ò:
{accumulated_context}

–¢–ï–ö–£–©–ò–ô –ó–ê–ü–†–û–°:
{new_query}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–∞–π —É–º–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
"""
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.context_buffer = []
        self.last_request_time = datetime.now()
        
        return full_prompt


class GeminiManager:
    """–£–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Gemini API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # –í–∞—à–∏ API –∫–ª—é—á–∏
        self.api_keys = [
            "AIzaSyBPVRBwGusg6B4splT646TYd32hbGoozyA",
            "AIzaSyDor690Nm0efjObnHFWcS3sEv9Z3EFW_oU", 
            "AIzaSyBkJ5NN1XcC0iTf97e8m_urieGQhInyusc",
            "AIzaSyAAHwFeVoDBFgr5cAlJ9u2a5okOVsc4oXg",
            "AIzaSyA53tJdghSG6PnDv2lThkCV9x_cQhxecKM",
            "AIzaSyCaohwOPByd6-tBYThx0kysAXJyoDjk9u8",
            "AIzaSyDaYXMo9NwPcmBKGx6lN2mcJU5QW4JIVug",
            "AIzaSyArLkcZWgM5qQYzPOVfjH1BqjEIpA_4HEo",
            "AIzaSyD5PSsLmBtnmcpPUO4vq9Pg2a1rqJtHpks",
            "AIzaSyAG2IFVG4dUlZlExavQSM-A0vjzByVVcbA"
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–∞–º
        self.key_stats = {
            key: APIKeyStats(key=key) for key in self.api_keys
        }
        
        # –£–º–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.context_accumulator = SmartContextAccumulator()
        
        # –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
        self.current_key_index = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Gemini
        self.safety_settings = {
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
        }
        
        self.logger.info(f"üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Gemini Manager —Å {len(self.api_keys)} –∫–ª—é—á–∞–º–∏")
    
    def get_next_available_key(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π API –∫–ª—é—á"""
        today = datetime.now().date()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        for stats in self.key_stats.values():
            if stats.last_used and stats.last_used.date() < today:
                stats.requests_today = 0
                stats.errors_count = 0
        
        # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á
        attempts = 0
        while attempts < len(self.api_keys):
            current_key = self.api_keys[self.current_key_index]
            stats = self.key_stats[current_key]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
            if (stats.is_active and 
                stats.requests_today < stats.daily_limit and 
                stats.errors_count < 5):
                
                return current_key
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É
            self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
            attempts += 1
        
        self.logger.warning("‚ö†Ô∏è –í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
        return None
    
    def update_key_stats(self, api_key: str, success: bool, error: str = None):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞"""
        if api_key in self.key_stats:
            stats = self.key_stats[api_key]
            stats.requests_today += 1
            stats.last_used = datetime.now()
            
            if not success:
                stats.errors_count += 1
                if stats.errors_count >= 5:
                    stats.is_active = False
                    self.logger.warning(f"üö´ –ö–ª—é—á {api_key[:20]}... –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
    
    async def smart_request(self, prompt: str, context_type: str = "general", critical: bool = False) -> Optional[str]:
        """–£–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if critical:
            context_type = "critical"
        
        self.context_accumulator.add_context(context_type, prompt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–µ–π—á–∞—Å
        if not critical and not self.context_accumulator.should_make_request():
            self.logger.info("üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä, –∑–∞–ø—Ä–æ—Å –æ—Ç–ª–æ–∂–µ–Ω")
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        full_prompt = self.context_accumulator.build_accumulated_prompt(prompt)
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        return await self._make_api_request(full_prompt)
    
    async def _make_api_request(self, prompt: str, max_retries: int = 3) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
        
        for attempt in range(max_retries):
            api_key = self.get_next_available_key()
            
            if not api_key:
                self.logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π")
                return None
            
            try:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
                genai.configure(api_key=api_key)
                model = genai.GenerativeModel(
                    'gemini-1.5-flash',  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                    safety_settings=self.safety_settings
                )
                
                self.logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∫–ª—é—á {api_key[:20]}...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = await asyncio.to_thread(
                    model.generate_content, 
                    prompt
                )
                
                if response.text:
                    self.update_key_stats(api_key, success=True)
                    self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
                    self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
                    
                    return response.text
                else:
                    raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                    
            except Exception as e:
                error_msg = str(e)
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {error_msg}")
                
                self.update_key_stats(api_key, success=False, error=error_msg)
                
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É
                if "quota" in error_msg.lower() or "limit" in error_msg.lower():
                    self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if attempt < max_retries - 1:
                    await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        self.logger.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        return None
    
    def get_api_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        total_requests = sum(stats.requests_today for stats in self.key_stats.values())
        active_keys = sum(1 for stats in self.key_stats.values() if stats.is_active)
        
        return {
            "total_keys": len(self.api_keys),
            "active_keys": active_keys,
            "total_requests_today": total_requests,
            "context_buffer_size": len(self.context_accumulator.context_buffer),
            "current_key_index": self.current_key_index
        }
    
    async def analyze_earning_opportunity(self, market_data: Dict[str, Any], current_earnings: float) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å)"""
        
        prompt = f"""
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –¥–µ–Ω–µ–≥ –æ–Ω–ª–∞–π–Ω. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ö–û–ù–ö–†–ï–¢–ù–´–ï –¥–µ–π—Å—Ç–≤–∏—è.

–¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:
- –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${current_earnings:.2f}
- –¶–µ–ª—å: $1.00 –≤ –¥–µ–Ω—å
- –û—Å—Ç–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å: ${1.0 - current_earnings:.2f}

–î–û–°–¢–£–ü–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:
1. –§—Ä–∏–ª–∞–Ω—Å (–º–∏–∫—Ä–æ-–∑–∞–¥–∞—á–∏, –ø–µ—Ä–µ–≤–æ–¥—ã, data entry)
2. –ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (–ø–æ—Å—Ç—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)  
3. –û–ø—Ä–æ—Å—ã –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
4. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
5. –ú–∏–∫—Ä–æ-–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏

–î–ê–ô –ö–û–ù–ö–†–ï–¢–ù–´–ô –ü–õ–ê–ù:
1. –ö–∞–∫—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–ï–ô–ß–ê–°?
2. –ì–¥–µ –∏–º–µ–Ω–Ω–æ –∏—Å–∫–∞—Ç—å –∑–∞–¥–∞—á–∏?
3. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?
4. –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥?

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º –°–ï–ì–û–î–ù–Ø.
"""
        
        response = await self.smart_request(prompt, "market_analysis", critical=True)
        
        if response:
            try:
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                return {
                    "recommendation": response,
                    "confidence": 0.8,
                    "estimated_time": 60,  # –º–∏–Ω—É—Ç
                    "estimated_earning": min(1.0 - current_earnings, 0.5)
                }
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                return None
        
        return None
    
    async def optimize_strategy(self, strategy_results: List[Dict[str, Any]]) -> Optional[str]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        for result in strategy_results:
            self.context_accumulator.add_context("strategy_result", result)
        
        # –ù–µ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É - –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        return await self.smart_request(
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è",
            "strategy_optimization"
        )