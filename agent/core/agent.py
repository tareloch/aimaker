"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any
from dataclasses import dataclass

from agent.core.config import Config
from agent.strategies.strategy_manager import StrategyManager


@dataclass
class AgentState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    is_running: bool = False
    daily_earnings: float = 0.0
    total_earnings: float = 0.0
    tasks_completed: int = 0
    active_strategies: List[str] = None
    last_learning_update: datetime = None
    
    def __post_init__(self):
        if self.active_strategies is None:
            self.active_strategies = []
        if self.last_learning_update is None:
            self.last_learning_update = datetime.now()


class AutonomousAgent:
    """
    –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI –∞–≥–µ–Ω—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–Ω–µ–≥
    
    –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    - –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    - –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """
    
    def __init__(self, config: Config):
        self.config = config
        self.logger = logging.getLogger(__name__)
        self.state = AgentState()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.strategy_manager = None
        
        self.logger.info("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
        try:
            self.logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.config.validate_configuration():
                self.logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–æ –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            self.strategy_manager = StrategyManager(self.config)
            
            self.logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        self.state.is_running = True
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–≥–µ–Ω—Ç–∞")
        
        try:
            while self.state.is_running:
                await self._daily_cycle()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
                if self.state.daily_earnings >= self.config.agent.daily_earning_goal:
                    self.logger.info(f"üéâ –î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ${self.state.daily_earnings:.2f}")
                    await self._end_of_day_routine()
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
                
        except KeyboardInterrupt:
            self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            await self.shutdown()
    
    async def _daily_cycle(self):
        """–î–Ω–µ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        try:
            self.logger.info("üìÖ –ù–∞—á–∞–ª–æ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            available_strategies = await self.strategy_manager.get_available_strategies()
            
            if not available_strategies:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
            remaining_target = self.config.agent.daily_earning_goal - self.state.daily_earnings
            selected_strategies = await self.strategy_manager.select_best_strategies(remaining_target)
            
            self.logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(selected_strategies)} —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ ${remaining_target:.2f}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            for strategy in selected_strategies:
                if not self.state.is_running:
                    break
                
                self.logger.info(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy.name}")
                result = await strategy.execute()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result.get("success", False):
                    earnings = result.get("earnings", 0.0)
                    self.state.daily_earnings += earnings
                    self.state.total_earnings += earnings
                    self.state.tasks_completed += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                    if strategy.name not in self.state.active_strategies:
                        self.state.active_strategies.append(strategy.name)
                    
                    self.logger.info(
                        f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy.name}: +${earnings:.2f} "
                        f"(–≤—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${self.state.daily_earnings:.2f})"
                    )
                else:
                    error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    self.logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy.name} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {error}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
                await asyncio.sleep(30)
            
            # –û–±—â–∞—è –ø–∞—É–∑–∞ –≤ –∫–æ–Ω—Ü–µ —Ü–∏–∫–ª–∞
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–Ω–µ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    

    
    async def _end_of_day_routine(self):
        """–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ–Ω—Ü–∞ –¥–Ω—è"""
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è
            self.logger.info(f"üìä –ò—Ç–æ–≥–∏ –¥–Ω—è: –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ ${self.state.daily_earnings:.2f}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {self.state.tasks_completed} –∑–∞–¥–∞—á")
            
            # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.state.daily_earnings = 0.0
            self.state.tasks_completed = 0
            self.state.active_strategies = []
            
            self.logger.info("‚úÖ –î–Ω–µ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –∫–æ–Ω—Ü–∞ –¥–Ω—è: {e}")
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞...")
        
        self.state.is_running = False
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.logger.info(f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${self.state.total_earnings:.2f}")
        
        self.logger.info("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        return {
            "is_running": self.state.is_running,
            "daily_earnings": self.state.daily_earnings,
            "total_earnings": self.state.total_earnings,
            "tasks_completed": self.state.tasks_completed,
            "active_strategies": self.state.active_strategies,
            "daily_goal": self.config.agent.daily_earning_goal,
            "progress_percentage": (self.state.daily_earnings / self.config.agent.daily_earning_goal) * 100
        }