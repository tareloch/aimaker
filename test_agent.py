#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞
"""

import asyncio
import logging
import sys
from agent.core.config import Config
from agent.core.gemini_manager import GeminiManager
from agent.strategies.strategy_manager import StrategyManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(name)s | %(levelname)s | %(message)s'
)


async def test_gemini_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Gemini API"""
    print("\nüß™ –¢–ï–°–¢: Gemini Manager")
    print("=" * 40)
    
    try:
        gemini = GeminiManager()
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
        stats = gemini.get_api_stats()
        print(f"‚úÖ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –¢–µ—Å—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
        gemini.context_accumulator.add_context("test", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω, —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(gemini.context_accumulator.context_buffer)}")
        
        print("‚úÖ Gemini Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini Manager: {e}")
        return False


async def test_strategies():
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    print("\nüß™ –¢–ï–°–¢: –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞")
    print("=" * 40)
    
    try:
        config = Config()
        strategy_manager = StrategyManager(config)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        available = await strategy_manager.get_available_strategies()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {len(available)}")
        
        for strategy in available:
            print(f"   üìã {strategy.name} - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${await strategy.estimate_potential():.2f}")
        
        # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        best_strategies = await strategy_manager.select_best_strategies(1.0)
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è $1.00: {len(best_strategies)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
        return False


async def test_strategy_execution():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤)"""
    print("\nüß™ –¢–ï–°–¢: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    print("=" * 40)
    
    try:
        config = Config()
        strategy_manager = StrategyManager(config)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_name = "smart_referral"
        
        print(f"üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        strategy = strategy_manager.strategies.get(strategy_name)
        if not strategy:
            print(f"‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        can_execute = await strategy.can_execute()
        print(f"‚úÖ –ú–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è: {can_execute}")
        
        if can_execute:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)
            print("üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
            
            # –ó–¥–µ—Å—å –º—ã –Ω–µ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API, –∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
            earnings = 0.45  # –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
            
            result = {
                "success": True,
                "earnings": earnings,
                "strategy": strategy_name,
                "test_mode": True
            }
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (—Å–∏–º—É–ª—è—Ü–∏—è): +${earnings:.2f}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False


async def test_agent_components():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
    print("\nüß™ –¢–ï–°–¢: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞")
    print("=" * 40)
    
    try:
        from agent.core.agent import AutonomousAgent
        
        config = Config()
        agent = AutonomousAgent(config)
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await agent.initialize()
        print("‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status = agent.get_status()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞: {status}")
        
        # –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if agent.strategy_manager:
            print("‚úÖ StrategyManager –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("‚ùå StrategyManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False


async def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("=" * 40)
    
    try:
        config = Config()
        
        print(f"‚úÖ –î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: ${config.agent.daily_earning_goal}")
        print(f"‚úÖ –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á: {config.agent.max_daily_tasks}")
        print(f"‚úÖ –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ä–∏—Å–∫—É: {config.agent.risk_tolerance}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        missing_apis = config.get_missing_apis()
        if missing_apis:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏: {missing_apis}")
        else:
            print("‚úÖ –í—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ù–û–ú–ù–û–ì–û AI –ê–ì–ï–ù–¢–ê")
    print("=" * 50)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("Gemini Manager", test_gemini_manager),
        ("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏", test_strategies),
        ("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", test_strategy_execution),
        ("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞", test_agent_components),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 30)
    
    passed = 0
    failed = 0
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:.<20} {status}")
        
        if result:
            passed += 1
        else:
            failed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed} –ø—Ä–æ—à–ª–æ, {failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print(f"\n‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    
    return failed == 0


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞...")
    
    try:
        result = asyncio.run(run_all_tests())
        sys.exit(0 if result else 1)
        
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)